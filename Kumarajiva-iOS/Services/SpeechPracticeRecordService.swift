//
//  SpeechPracticeRecordService.swift
//  Kumarajiva-iOS
//
//  Created by AI Assistant on 2023-11-15.
//

import Foundation

class SpeechPracticeRecordService {
    static let shared = SpeechPracticeRecordService()
    
    private(set) var records: [SpeechPracticeRecord] = []
    private(set) var recordsByWord: [String: [SpeechPracticeRecord]] = [:]
    private(set) var countByWord: [String: Int] = [:]
    private(set) var highestScoreByWord: [String: Int] = [:]
    
    private let persistentStorage = PersistentStorageManager.shared
    
    private init() {
        loadRecords()
    }
    
    func loadRecords() {
        do {
            // È¶ñÂÖàÂ∞ùËØï‰ªéÊåÅ‰πÖÂåñÂ≠òÂÇ®Âä†ËΩΩ
            let savedRecords = try persistentStorage.loadSpeechPracticeRecords()
            
            // ËøáÊª§ÊéâÊó†ÊïàÁöÑËÆ∞ÂΩï
            records = savedRecords.filter { record in
                FileManager.default.fileExists(atPath: record.audioURL.path)
            }
            
            updateCaches()
            print("üé§ [Speech] ÊàêÂäüÂä†ËΩΩËØ≠Èü≥ÁªÉ‰π†ËÆ∞ÂΩï: \(records.count) Êù°")
            
        } catch {
            print("üé§ [Speech] ‰ªéÊåÅ‰πÖÂåñÂ≠òÂÇ®Âä†ËΩΩÂ§±Ë¥•ÔºåÂ∞ùËØï‰ªéUserDefaultsËøÅÁßª: \(error)")
            
            // Â¶ÇÊûúÊåÅ‰πÖÂåñÂ≠òÂÇ®Â§±Ë¥•ÔºåÂ∞ùËØï‰ªéUserDefaultsËøÅÁßª
            migrateFromUserDefaults()
        }
    }
    
    private func migrateFromUserDefaults() {
        let userDefaults = UserDefaults.standard
        guard let data = userDefaults.data(forKey: "speechPracticeRecords") else {
            print("üé§ [Speech] UserDefaults‰∏≠Ê≤°ÊúâÊâæÂà∞ËØ≠Èü≥ÁªÉ‰π†ËÆ∞ÂΩï")
            records = []
            updateCaches()
            return
        }
        
        do {
            let decoder = JSONDecoder()
            let savedRecords = try decoder.decode([SpeechPracticeRecord].self, from: data)
            
            // ËøáÊª§ÊéâÊó†ÊïàÁöÑËÆ∞ÂΩï
            records = savedRecords.filter { record in
                FileManager.default.fileExists(atPath: record.audioURL.path)
            }
            
            // ËøÅÁßªÂà∞ÊåÅ‰πÖÂåñÂ≠òÂÇ®
            try persistentStorage.saveSpeechPracticeRecords(records)
            
            // Ê∏ÖÈô§UserDefaults‰∏≠ÁöÑÊóßÊï∞ÊçÆ
            // userDefaults.removeObject(forKey: "speechPracticeRecords")
            
            updateCaches()
            print("üé§ [Speech] ÊàêÂäü‰ªéUserDefaultsËøÅÁßªËØ≠Èü≥ÁªÉ‰π†ËÆ∞ÂΩï: \(records.count) Êù°")
            
        } catch {
            print("üé§ [Speech] ËøÅÁßªËØ≠Èü≥ÁªÉ‰π†ËÆ∞ÂΩïÂ§±Ë¥•: \(error)")
            records = []
            updateCaches()
        }
    }
    
    private func updateCaches() {
        // Êõ¥Êñ∞ÊåâÂçïËØçÂàÜÁªÑÁöÑÁºìÂ≠ò
        recordsByWord = Dictionary(grouping: records) { $0.word }
        
        // Êõ¥Êñ∞ÊØè‰∏™ÂçïËØçÁöÑËÆ∞ÂΩïÊï∞Èáè
        countByWord = recordsByWord.mapValues { $0.count }
        
        // Êõ¥Êñ∞ÊØè‰∏™ÂçïËØçÁöÑÊúÄÈ´òÂàÜÊï∞
        highestScoreByWord = recordsByWord.mapValues { records in
            records.map { $0.score }.max() ?? 0
        }
    }
    
    func getRecordsForWord(_ word: String) -> [SpeechPracticeRecord] {
        return recordsByWord[word] ?? []
    }
    
    func getRecordCount(forWord word: String) -> Int {
        return countByWord[word] ?? 0
    }
    
    func getHighestScore(forWord word: String) -> Int {
        return highestScoreByWord[word] ?? 0
    }
    
    func addRecord(_ record: SpeechPracticeRecord) {
        records.insert(record, at: 0)
        saveRecords()
    }
    
    func deleteRecord(id: UUID) {
        guard let index = records.firstIndex(where: { $0.id == id }) else { return }
        
        let record = records[index]
        
        // Âà†Èô§Êñá‰ª∂
        do {
            try FileManager.default.removeItem(at: record.audioURL)
        } catch {
            print("Âà†Èô§ÂΩïÈü≥Êñá‰ª∂Â§±Ë¥•: \(error)")
        }
        
        // ‰ªéËÆ∞ÂΩï‰∏≠ÁßªÈô§
        records.remove(at: index)
        saveRecords()
    }
    
    func deleteAllRecordsForWord(_ word: String) {
        let recordsToDelete = records.filter { $0.word == word }
        
        // Âà†Èô§Êñá‰ª∂
        for record in recordsToDelete {
            do {
                try FileManager.default.removeItem(at: record.audioURL)
            } catch {
                print("Âà†Èô§ÂΩïÈü≥Êñá‰ª∂Â§±Ë¥•: \(error)")
            }
        }
        
        // ‰ªéËÆ∞ÂΩï‰∏≠ÁßªÈô§
        records.removeAll { $0.word == word }
        saveRecords()
    }
    
    private func saveRecords() {
        do {
            try persistentStorage.saveSpeechPracticeRecords(records)
            
            // Êõ¥Êñ∞ÁºìÂ≠ò
            updateCaches()
        } catch {
            print("üé§ [Speech] ‰øùÂ≠òËØ≠Èü≥ÁªÉ‰π†ËÆ∞ÂΩïÂ§±Ë¥•: \(error)")
        }
    }
}